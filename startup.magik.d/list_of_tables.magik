#% text_encoding = iso8859_1
## `Source contents (Starts with evt. Shared Cons/vars, Automatically maintained):'
##
## `Source Code'
#&&

_package user

_global write_padded <<
_proc @write_padded (s1, s1_width, column1_width, s2)
			
	sf << string_format.new_with_properties(
		:string_template, column1_width*%#,
		:string_padding_char, % ,
		:string_padding, :end)
	
	write(sf.format(s1.truncate(s1_width)), s2)
_endproc

_global create_exclude_pattern <<
	_proc @create_exclude_pattern (patterns)
		exclude_pattern << predicate.wild(:name, patterns[1])
		_for i _over 2.upto(patterns.size)
		_loop
			exclude_pattern << exclude_pattern.or(predicate.wild(:name, patterns[i]))
		_endloop
		 >> exclude_pattern.not
	_endproc

_global compare_table_name_func <<
	_proc @compare_table_name_func (table_a, table_b)
		_return table_a.name _cf table_b.name
	_endproc

_global exclude_patterns << rope.new_from({
			    "*dd!*",
			    "sw_gis!*",
				"int!*"
		    })

_global list_of_tables <<
	_proc @list_of_tables (the_dataset, _optional no_internal_tables)

		the_tables << the_dataset.collections.as_sorted_collection(compare_table_name_func)
		
		# ----------
		#  default behaviour: don't print internal tables
		# ----------
		_if no_internal_tables _is _unset _orif no_internal_tables
		_then
			no_internal_tables_pred << create_exclude_pattern(exclude_patterns)

			the_tables << the_tables.select(no_internal_tables_pred)
		_endif

		_for table _over the_tables.fast_elements()
		_loop
			write_padded(table.name.as_charvec(), 27, 31, table.size)
		_endloop
	_endproc
