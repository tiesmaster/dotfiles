#!/usr/bin/env python
# buildkernel: make a kernel via genkernel
#
# this script will try to find the latest config in /etc/kernels, copy it to
# /usr/src/linux and run genkernel on it
# pre conditions: this is the first build and there's no config in
# /usr/src/linux yet (so we have to run menuconfig (sort of automated oldconfig)

# this is effectively:
# cp /etc/kernels/kernel-config-x86-2.6.MAX-gentoo-rMAX /usr/src/linux/.config
# sudo genkernel --kernname=buildXX --menuconfig all

# ***BRAINSTORM***
# Het apparaat gaat de laatste config uit /etc/kernels oplepelen, als dit build
# 00 gaat worden, dan moet die de laatste van de vorige versie pakken en anders
# gewoon de config van de vorige build. Hierop wordt simpelweg genkernel
# gedraaid, dit levert een nieuwe config op, deze wordt naar /etc/kernels
# gecopieerd, en voila.
# Je hebt te maken met X aantal variabelen, de kernel version KV, dit is
# bijvoorbeeld 2.6.19-gentoo-r5, deze komt in 2 smaken, voor de ebuild's is dit
# gentoo-sources-2.6.19-r5, dus zonder de gentoo in de versie string. Daarnaast
# introduceer ik de variabele BUILD, deze wordt telkens met 1 verhoogd bij een
# nieuwe build van de kernel. Allereerst moet de config gekopieerd worden naar
# /usr/src/linux, dit is in feite onafhankelijk van de versie en build, je hebt
# simpelweg de laatste versie nodig. Dit is simpelweg de laatste config in
# /etc/kernels en deze gaat altijd naar /usr/src/linux. Als er nu een nieuwe KV
# is in /usr/src, dan moet de BUILD naar 0, anders wordt dit 1 hoger. Na de
# build, wordt de (evt.) aangepaste config naar /etc/kernels gecopieerd op basis
# van de juiste KV en BUILD.

import os
import sys
import shutil

CONFIG_DIR = "/etc/kernels"
CONFIG_TEMPLATE = "kernel-config-x86-%(kv)s-build%(build)02d"
KERNEL_DIR = "/usr/src/linux"
KERNEL_CONFIG = os.path.join(KERNEL_DIR, ".config")
BUILD_CMD = "genkernel --kernname=build%2d --menuconfig all"

#/usr/src/linux-2.6.19-gentoo-r5
#/boot/kernel-build00-x86-2.6.19-gentoo-r5

#KERNEL_VERSION = '2.6.19-gentoo-r5'
#LATEST_CONFIG = CONFIG_DIR / 'kernel-config-x86-' KERNEL_VERION

def get_installed_kv(kernel_dir):
	"""Get the version of the installed kernel in 'kernel_dir', by reading the
	symlink of this dir
	"""
	# usually kernel_dir is /usr/src/linux
	# this will return 2.6.19-gentoo-r5, for example
	return os.path.basename(os.path.realpath(KERNEL_DIR)).lstrip('linux-')

def get_last_build_kv(config_file):
	"""Get the version of the last build kernel, based on the latest config file
	in /etc/kernels.
	"""
	# examples of config_file:
	#/etc/kernels/kernel-config-x86-2.6.19-gentoo-r5
	#/etc/kernels/kernel-config-x86-2.6.19-gentoo-r5-build00
	# returns 2.6.19-gentoo-r5
	return '-'.join(config_file.lstrip('kernel-config-x86-').split('-')[1:3])

def get_last_build(config_file):
	"""Get the last build of the kernel.
	"""
	# examples of config_file:
	#/etc/kernels/kernel-config-x86-2.6.19-gentoo-r5
	#/etc/kernels/kernel-config-x86-2.6.19-gentoo-r5-build00
	# return in both cases with 0
	if len(config_file.split('build')) == 0:
		return 0
	else:
		return int(config_file.split('build')[1])

def buildkernel():
	# get the last build config and copy it to the kernel source
	last_config = os.path.basename(sorted(os.listdir(CONFIG_DIR))[-1])
	shutil.copy(os.path.join(CONFIG_DIR, last_config), KERNEL_CONFIG)

	# get status of the kernel version, build and do the build
	installed_kv = get_installed_kv(KERNEL_DIR)
	last_build_kv = get_last_build_kv(last_config)
	if installed_kv == last_build_kv:
		build = get_last_build(last_config) + 1
	else:
		build = 0
	os.system(BUILD_CMD % build)

	# copy this last config back to CONFIG_DIR
	shutil.copy(KERNEL_CONFIG, os.path.join(CONFIG_DIR, CONFIG_TEMPLATE %
		{'kv': installed_kv, 'build': build}))
#	kv = get_kernel_version()
#	print "Got kernel version: %s" % kv
#	build = get_latest_build(kv)
#	print "Last build is %d" % build
#	last_config = sorted(os.listdir(CONFIG_DIR))[-1]
#	print "Going to copy '%s' to /usr/src/linux (%s)" % (last_config,
#		os.path.realpath(KERNEL_DIR))
#	shutil.copy(last_config, KERNEL_CONFIG)
#	build += 1
#	print "Going to run '%s'" % (BUILD_CMD % build)
#	os.system(BUILD_CMD % build)
#	print "Saving config to /etc/kernels"
#	shutil.copy(KERNEL_CONFIG, os.path.join(CONFIG_DIR,
#		'kernel-config-x86-%s' 

if __name__ == '__main__':
	buildkernel()

# vim:textwidth=80:tabstop=4:shiftwidth=4:
