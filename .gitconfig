[user]
	name = Thijs Brobbel
	email = thijsbrobbel@gmail.com
[include]
    path = ~/.gitconfig.local
[core]
	autocrlf = true
	editor = gvim --nofork '%*'
    excludesfile = ~/.gitignore_global
[push]
	default = simple

;[merge]
    ;tool = fugitive
	;keepBackup = false
;[mergetool "fugitive"]
	;cmd = gvim -f -c \"Gdiff\" \"$MERGED\"
;[mergetool "sourcetree"]
	;cmd = 'C:/Program Files/Perforce/p4merge.exe' \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
	;trustExitCode = true

[alias]
    la = "!git config -l | grep alias | cut -c 7-"
	co = checkout
	br = branch
	ci = commit -v
	ca = commit -va
	st = status
	lol = log --pretty=oneline --abbrev-commit --graph --decorate
	unstage = reset HEAD --
	last = log -1 HEAD
	stash-unapply = !git stash show -p | git apply -R
	unmv = "!f() { git mv $2 $1; }; f"
	update = commit -v --amend -Chead
	updatea = commit -va --amend -Chead
    f = "!git ls-files | grep -i"

    add-upstream = remote add upstream
    fa = fetch --all
    pum = pull --ff-only upstream master
    pu = !git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)

    r1 = reset HEAD^
    pr = "!f() { git fetch -fu ${2:-upstream} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format=\"%(refname)\" | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    fp = fetch --prune

    sln = !start $(git f sln)

    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    cp = cherry-pick
    sts = status -s
    stsc = !git sts |cut -b4-

    rh = reset --hard
    rh1 = reset HEAD^ --hard
    pushf = push -f

    sync = !git pum && git fp && git push && git branch --merged

    irebase = "rebase -i"
    iarebase = "rebase -i --autosquash"

    sl = stash list
    ; --------------------------------------------------------------------------------


    ;cl = clone

    ;;ci = commit
    ;cm = commit -m
    ;cma = commit -a -m
    ;;ca = commit --amend
    ;amend = commit --amend
    ;caa = commit -a --amend -C HEAD
    ;filelog = log -u
    ;fl = log -u

    ;ai = add --interactive

    ;co = checkout
    ;br = branch 
    ;#"!git branch -ra | grep -v done"
    ;bra = branch -ra
    ;#list commands
    ;le = log --oneline --decorate
    ;ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ;ls1 = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ;ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ;lds = log --pretty=format:"%C(yellow)%h\\ %C(green)%ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short --graph
    ;lc  = "!f() { git ll "$1"^.."$1"; }; f"
    ;lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    ;#list all aliases
    ;diff = diff --word-diff
    ;d = diff --word-diff
    ;dc = diff --cached
    ;#list modified files in last commit
    ;dl = "!git ll -1"
    ;#diff last commit
    ;dlc = diff --cached HEAD^
    ;dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    ;diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    ;branch = branch -ra

    ;#reset commands
    ;r = reset
    ;r2 = reset HEAD^^
    ;rh2 = reset HEAD^^ --hard

    ;#git svn
    ;svnr = svn rebase
    ;svnd = svn dcommit
    ;svnl = svn log --oneline --show-commit

    ;#stash
    ;sa = stash apply
    ;ss = stash save

    ;grep = grep -Ii
    ;gr = grep -Ii
    ;#grep from root folder
    ;gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    ;#rename branch tree to done-
    ;done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    ;#assume aliases
    ;assume = update-index --assume-unchanged
    ;unassume = update-index --no-assume-unchanged
    ;#show assumed files
    ;assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    ;#unassume all the assumed files
    ;unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    ;assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    ;lasttag = describe --tags --abbrev=0
    ;lt = describe --tags --abbrev=0

    ;#merges
    ;ours = "!f() { git co --ours $@ && git add $@; }; f"
    ;theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    ;#list remotes
    ;rem="!git config -l | grep remote.*url | tail -n +2"

    ;#apply patch from other local repo
    ;lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    ;#subtree add
    ;sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    ;# initial empty commit
    ;empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    ;# interactive rebase
	;mu = merge --ff-only upstream/master
    ;dmb = delete-merged-branches
