########################################################################
# Evil bash settings file for Ciaran McCreesh <ciaranm at gentoo.org>
#
# Not many comments here, you'll have to guess how it works. Note that
# I use the same .bashrc on Linux, IRIX and Slowaris, so there's some
# strange uname stuff in there.
#
# Most recent update: Wed 11 May 2005 17:40:54 BST
#
# Get the latest version from:
#     http://dev.gentoo.org/~ciaranm/configs/bashrc
#
########################################################################

eval unset ${!LC_*}
export LANG="en_GB.UTF-8"
export LC_COLLATE="C"

[[ -d ${HOME}/svn ]] && export SVNDIR=${HOME}/svn

export UNAME_S=$(uname -s 2>&1 || echo "Linux" )

if [[ "${TERM}" == "rxvt-unicode" ]] ; then
    export TERMTYPE="256"
elif [[ "${TERM}" != "dumb" ]] ; then
    export TERMTYPE="16"
else
    export TERMTYPE=""
    export NOCOLOR="true"
fi

if [[ "${TERM}" == "rxvt-unicode" ]] && \
        [[ ! -f /usr/share/terminfo/r/rxvt-unicode ]] && \
        [[ ! -f ~/.terminfo/r/rxvt-unicode ]] ; then
    export TERM=rxvt
fi

select_by_term() {
    if [[ "${TERMTYPE}" == "256" ]] ; then
        echo -n "$1"
    elif [[ "${TERMTYPE}" == "16" ]] ; then
        echo -n "$2"
    else
        echo -n "$3"
    fi
}

if [[ -n "${PATH/*$HOME\/bin:*}" ]] ; then
    export PATH="$HOME/bin:$PATH"
fi

if [[ -n "${PATH/*\/usr\/local\/bin:*}" ]] ; then
    export PATH="/usr/local/bin:$PATH"
fi

if [[ -f /usr/bin/less ]] ; then
    export PAGER=less
    export LESS="--ignore-case --long-prompt"
fi
if [[ -f /usr/bin/vimpager ]] ; then
    export PAGER=vimpager
    export MANPAGER=vimmanpager
elif [[ -f /usr/share/vim/vim63/macros/less.sh ]] ; then
    export PAGER="/usr/share/vim/vim63/macros/less.sh"
elif [[ -f /usr/share/vim/vim70aa/macros/less.sh ]] ; then
    export PAGER="/usr/share/vim/vim70aa/macros/less.sh"
fi
alias page=$PAGER

# Standard stuff
if [[ "$UNAME_S" == "Linux" ]] ; then
    if [[ -n "${TERMTYPE}" ]] ; then
        eval `dircolors -b /etc/DIR_COLORS`
        alias ls="ls --color"
        alias ll="ls --color -l -h"
    else
        alias ll="ls -l -h"
    fi
else
    alias ll="ls -l"
fi

alias pd="pushd"
alias pp="popd"

# More standard stuff
case $TERM in
    xterm*|rxvt|Eterm|eterm|rxvt-unicode)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    screen)
        PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
        ;;
esac

# Bash completion
[[ -f /etc/profile.d/bash-completion ]] && \
    source /etc/profile.d/bash-completion

export FIGNORE='~'

# Bash history
export HISTCONTROL=ignorespace:ignoredups
export HISTFILESIZE=50000
export HISTSIZE=50000

# Set up host-specific things
hostcolour() {
    case ${1:-$(hostname)} in
        snowdrop) # teal
            echo $(select_by_term '\033[38;5;22m' '\033[0;36m' '' )
            ;;
        raindrop) # magenta
            echo $(select_by_term '\033[38;5;54m' '\033[01;35m' '' )
            ;;
        evildrop) # green
            echo $(select_by_term '\033[38;5;20m' '\033[01;32m' '' )
            ;;

        *) # orange
            echo $(select_by_term '\033[38;5;68m' '\033[01;31m' '' )
            ;;
    esac
}

if [[ -f /etc/gentoo-release ]] ; then
    # can no longer reliably use make.defaults
    # HOST_ARCH=`sed -ne 's/^ARCH="\([^"]*\)"$/\1/p' \
    #   /etc/make.profile/make.defaults`
    HOST_ARCH=$(readlink /etc/make.profile | \
        sed -ne 's,.*default-linux/\([^/]\+\)/.*,\1,1p' )
fi

if [[ "${CPU_COUNT_HOSTNAME}" != "${HOSTNAME}" ]] ; then
    if [[ $(hostname ) == "toucan" ]] ; then
        SHOW_LOAD=""
        CPU_COUNT=1
    elif [[ "$UNAME_S" == "Linux" ]] ; then
        if [[ "${HOST_ARCH}" == "arm" ]] ; then
            CPU_COUNT=1
        else
            # How many CPUs? First, try the 'ncpus active' field (works on sparcs)
            CPU_COUNT=$(sed -ne 's!^ncpus active[[:space:]]\+: \([[:digit:]]\+\)!\1!p' \
                /proc/cpuinfo )
            # If that doesn't work, take the highest numbered processor and add one
            # (works on x86 and mips, may be screwy if the numbers aren't sequential)
            CPU_COUNT=${CPU_COUNT:=$((1 + $(sed -ne \
                's!^processor[[:space:]]\+: \([[:digit:]]\+\).*!\1!p' \
                /proc/cpuinfo | tail -n 1 )))}
            if [[ -n "${CPU_COUNT}" ]] ; then
                SHOW_LOAD="true"
            else
                SHOW_LOAD=""
            fi
        fi
    elif [[ "$UNAME_S" == "IRIX" ]] ; then
        CPU_COUNT=$(hinv | grep '^\([0-9]\)\{1,\} .* Processor' | cut -f 1 -d ' ')
    else
        SHOW_LOAD=""
    fi
    CPU_COUNT_HOSTNAME="${HOSTNAME}"
    export CPU_COUNT SHOW_LOAD CPU_COUNT_HOSTNAME
fi

# Pretty prompt
ps1_load_colour() {
    local l=${1%%.*}
    if [[ "$(($l >= ($CPU_COUNT * 2)))" == "1" ]] ; then
        # red
        echo -e $(select_by_term '\033[0;0m\033[38;5;64m' '\033[00;31m' '' )
    elif [[ "$(($l >= $CPU_COUNT))" == "1" ]] ; then
        # orange
        echo -e $(select_by_term '\033[0;0m\033[38;5;72m' '\033[01;33m' '' )
    else
        # yellow
        echo -e $(select_by_term '\033[0;0m\033[38;5;78m' '\033[0;37m' '' )
    fi
}

ps1_return_colour() {
    if [[ "$1" == "0" ]] ; then
        echo -e $(select_by_term '\033[0;0m\033[38;5;78m' '\033[0;37m' '' )
    else
        echo -e $(select_by_term '\033[0;0m\033[38;5;64m' '\033[01;31m' '' )
    fi
    return $1
}

PS1H="\[$(hostcolour)\]\\h"
PS1U=$(select_by_term '\[\033[38;5;78m\]\u' '\[\033[0;39m\]\u' '\u' )
PS1D=$(select_by_term '\[\033[38;5;38m\]\W' '\[\033[01;34m\]\W' '\W' )
PS1R=$(select_by_term "\\[\\033[00;39m\\]\$?" "\\[\\033[00;39m\\]\$?" "\$?" )
PS1R='\[$(ps1_return_colour $?)\]$?'
if [[ -n "${SHOW_LOAD}" ]] ; then
    if [[ "$UNAME_S" == "Linux" ]] ; then
        PS1L='\[$(ps1_load_colour $(cut -d " " -f 1 /proc/loadavg))\]$( \
            cut -d " " -f 1 /proc/loadavg) '
    else
        PS1L='\[$(ps1_load_colour $(uptime | cut -d" " -f14 | cut -d"," -f1 \
            ))\]$(echo $(uptime | cut -d" " -f14 | cut -d"," -f1)) '
    fi
fi

PS1CC=$(select_by_term '\033[38;5;55m' '\033[06;39m' '' )
PS1C='$([[ ${#DIRSTACK[*]} -gt 1 ]] && echo -e "\[${PS1CC}\]^${#DIRSTACK[*]} ")'

if ! sed -ne '2{ q 0 } ; 1{ /ROOT/ { q 2 } }' /etc/mtab 2>/dev/null ; then
    PS1S="c"
else
    PS1S=""
fi

if [[ -f /chroot-id ]] ; then
    PS1S="${PS1S}[$(</chroot-id )]"
fi

if [ "${TERM:0:6}" == "screen" ] ; then
    PS1S="${PS1S}s"
fi

if [[ -n ${PS1S} ]] ; then
    PS1S="$(select_by_term '\[\033[38;5;70m\]' '\[\033[00;35m\]' '' )${PS1S} "
fi

ps1_jobs() {
    local j=$(jobs | wc -l)
    if [[ $j -gt 0 ]] ; then
        echo "${j// } "
    fi
}

PS1S="$(select_by_term '\[\033[38;5;25m\]' '\[\033[00;35m\]' '' )\$(ps1_jobs )${PS1S}"

export PS1E=$(select_by_term '\[\033[00m\]' '\[\033[00m\]' '' )
export PS1="${PS1U}@${PS1H} ${PS1D} ${PS1R} ${PS1L}${PS1S}${PS1C}${PS1E}$ "

alias cu="cvs upd"

alias svu="svn update"
alias svs="svn status"
alias svc="svn commit"
alias sva="svn add"
alias svar="svn status | grep '^\?' | cut -d\  -f2- | xargs svn add"

alias ssync="rsync --rsh=ssh"
alias ssyncr="rsync --rsh=ssh --recursive --verbose --progress"

alias lib="telnet eleanor.lib.gla.ac.uk"

grab() {
    sudo chown ${USER} --recursive ${1:-.}
}

mkcd() {
    mkdir $1 && cd $1
}

qcd() {
    cd $1 2>/dev/null
}

fcd() {
    qcd ~/$1 || qcd ~/work/$1 || qcd ~/cvs/$1 || ecd $1
}

alias hmake="hilite make"
alias hmakej="hilite make -j"
alias clean="rm *~"

mktar() {
    tar jcvf "${1%%/}.tar.bz2" "${1%%/}/"
}

if [[ -f /etc/gentoo-release ]] ; then
    export ECHANGELOG_USER="Ciaran McCreesh <ciaranm@gentoo.org>"

    alias accept="ACCEPT_KEYWORDS='~${HOST_ARCH}'"
    alias acceptp="accept emerge -pv"
    alias accepte="accept sudo emerge"

    esync() {
        sudo emerge sync
    }
    alias eupdp="emerge -uDpv world"
    alias eupd="sudo emerge -uD world"
    alias eetc="sudo /usr/sbin/etc-update"

    alias reps="repoman scan"
    alias repc="repoman commit"
    alias ech="echangelog"
    alias echvb="echangelog 'Version bump'"
    alias fixh='sed -i -e "1s,-200.,-`date +%Y`,"'
    alias remrw="sudo mount -oremount -orw"
fi

alias rootwin="urxvt --font '-artwiz-lime-*-r-*-*-10-*-*-*-*-*-iso10646-1' \
  --tintColor white"
alias minic='echo -ne "\033]0;minicom\007" ; minicom -c on'

screen() {
    sed -e "s!hardstatus string \".*\"!hardstatus string \"%h - $(hostname)\"!" \
        -i ~/.screenrc
    export OLDTERM=${TERM}
    $(which screen ) "$@"
}

if [[ -f /etc/gentoo-release ]] ; then
# init.d things
svcs () {
    sudo /etc/init.d/$1 start
}

svce () {
    sudo /etc/init.d/$1 stop
}

svcr () {
    sudo /etc/init.d/$1 restart
}

svcz () {
    sudo /etc/init.d/$1 zap
}

rca () {
    sudo /sbin/rc-update add $1 default
}

rcd () {
    sudo /sbin/rc-update del $1 default
}

fi

# uploads
uploadtogentoomirrors() {
    scp $1 dev.gentoo.org:/space/distfiles*local/ && \
        ssh dev.gentoo.org chmod g+rw /space/distfiles*local/$1
}

uploadconfigfile() {
    scp $1 dev.gentoo.org:public_html/configs/${1#.}
}

# toys
makepasswords() {
    # suggest a bunch of possible passwords. not suitable for really early perl
    # versions that don't do auto srand() things.
    perl <<EOPERL
        my @a = ("a".."z","A".."Z","0".."9",(split //, q{#@,.<>$%&()*^}));
        for (1..10) {
            print join "", map { \$a[rand @a] } (1..rand(3)+7);
            print qq{\n}
        }
EOPERL
}

if [[ -f /etc/gentoo-release ]] ; then
explainuseflag() {
  sed -ne "s,^\([^ ]*:\)\?$1 - ,,p" \
    /usr/portage/profiles/use.desc \
    /usr/portage/profiles/use.local.desc
}
fi

echo1() {
    echo "$1"
}

if [[ -f /etc/gentoo-release ]] ; then

# find either a cvs co of gentoo's portage module or the portage directory, and
# echo the result.
eportdir() {
    # does fast cache magic. portageq in particular is really slow... this makes
    # subsequent calls to eportdir() pretty much instantaneous, as opposed to
    # taking several seconds.
    if [[ -n "${PORTDIR_CACHE}" ]] ; then
        echo "${PORTDIR_CACHE}"
    elif [[ -d ${HOME}/cvs/portage ]] ; then
        PORTDIR_CACHE="${HOME}/cvs/portage"
        eportdir
    elif [[ -d /usr/portage ]] ; then
        PORTDIR_CACHE="/usr/portage"
        eportdir
    else
        PORTDIR_CACHE="$(portageq portdir )"
        eportdir
    fi
}

# find a given ebuild. based upon code by agriffis. does some fancy prediction,
# so it will find categories if necessary (eg efind sparc-dev-sources will find
# sys-kernel/sparc-dev-sources, and does partial name matching). prints the
# result in the form category/package .
efind() {
    local efinddir cat pkg
    efinddir=$(eportdir)

    case $1 in
        *-*/*)
            pkg=${1##*/}
            cat=${1%/*}
            ;;

        ?*)
            pkg=${1}
            cat=$(echo1 ${efinddir}/*-*/${pkg}/*.ebuild)
            [[ -f $cat ]] || cat=$(echo1 ${efinddir}/*-*/${pkg}*/*.ebuild)
            [[ -f $cat ]] || cat=$(echo1 ${efinddir}/*-*/*${pkg}/*.ebuild)
            [[ -f $cat ]] || cat=$(echo1 ${efinddir}/*-*/*${pkg}*/*.ebuild)
            if [[ ! -f $cat ]]; then
                return 1
            fi
            pkg=${cat%/*}
            pkg=${pkg##*/}
            cat=${cat#${efinddir}/}
            cat=${cat%%/*}
        ;;
    esac

    echo ${cat}/${pkg}
}

# guesses who is to blame for a given package. uses metadata.xml if it's
# available. if not, it will try to use cvs log to determine who commited the
# ebuilds (only if a cvs co is available, of course...)
ewho() {
    local pc d metadata f

    pc=$(efind $*)
    d=$(eportdir)
    f=0

    if [[ $pc == "" ]] ; then
        echo "nothing found for $*"
        return 1
    fi

    metadata="${d}/${pc}/metadata.xml"
    if [[ -f "${metadata}" ]] ; then
        echo "metadata.xml says:"
        sed -ne 's,^.*<herd>\([^<]*\)</herd>.*,  herd:  \1,p' \
            "${metadata}"
        sed -ne 's,^.*<email>\([^<]*\)@[^<]*</email>.*,  dev:   \1,p' \
            "${metadata}"
        f=1
    fi

    if [[ -d ${d}/${pc}/CVS ]] ; then
        echo "CVS log says:"
        pushd ${d}/${pc} > /dev/null
        for e in *.ebuild ; do
            echo -n "${e}: "
            cvs log ${e} | sed -e '1,/^revision 1\.1$/d' | sed -e '2,$d' \
                -e "s-^.*author: --" -e 's-;.*--'
        done
        popd > /dev/null
        f=1
    fi

    if [[ f == 0 ]] ; then
        echo "Nothing found, so blame seemant"
        return 1
    fi
    return 0
}

# change to an ebuild's directory.
ecd() {
    local pc d

    pc=$(efind $*)
    d=$(eportdir)

    if [[ $pc == "" ]] ; then
        echo "nothing found for $*"
        return 1
    fi

    cd ${d}/${pc}
}

# is a box alive?
isalive() {
    ping -c1 $1
    return $?
}

edesc() {
    sed -ne 's-^DESCRIPTION="\(.*\)".*-\1-1p' < *.ebuild | sort -u
}

ewww() {
    sed -ne 's-^HOMEPAGE="\(.*\)".*-\1-1p' < *.ebuild | sort -u
}

fi

svnew() {
    [[ -z "$1" ]] && ( echo "need a parameter" ; return 1 )
    svnadmin create ${SVNDIR}/$1 && \
        svn checkout file://${SVNDIR}/$1
}

return 0

# vim: set et ts=4 tw=80 :
